// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9BzSYZY1UKe9wRcv3hPs4L
// Component: XGiLCLo1nSTHah
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: I_MYqYFFXiVox/component
import Button from "../../Button"; // plasmic-import: XcSNCNX4wrmaW/component
import Footer from "../../Footer"; // plasmic-import: 4zVNimxrflLuq/component

import { useScreenVariants as useScreenVariantsx3WpyNuTSdyZz6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: X3WpyNuTSdyZZ6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_professional_services.module.css"; // plasmic-import: 9BzSYZY1UKe9wRcv3hPs4L/projectcss
import sty from "./PlasmicContactUs.module.css"; // plasmic-import: XGiLCLo1nSTHah/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: xUJrFddW_IqdU/icon
import LoactionVectorsvgIcon from "./icons/PlasmicIcon__LoactionVectorsvg"; // plasmic-import: UaY-fa0qp1Hm6Y/icon
import PhoneVectorsvgIcon from "./icons/PlasmicIcon__PhoneVectorsvg"; // plasmic-import: d5ynWYo6wC3VOx/icon
import EmailVectorsvgIcon from "./icons/PlasmicIcon__EmailVectorsvg"; // plasmic-import: Qkfxs1onVexwkL/icon

export type PlasmicContactUs__VariantMembers = {};

export type PlasmicContactUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicContactUs__VariantsArgs;
export const PlasmicContactUs__VariantProps = new Array<VariantPropType>();

export type PlasmicContactUs__ArgsType = {};
type ArgPropType = keyof PlasmicContactUs__ArgsType;
export const PlasmicContactUs__ArgProps = new Array<ArgPropType>();

export type PlasmicContactUs__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  pageBanerSection?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  formContainer2?: p.Flex<"div">;
  textarea?: p.Flex<"textarea">;
  button?: p.Flex<typeof Button>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultContactUsProps {}

export const defaultContactUs__Args: Partial<PlasmicContactUs__ArgsType> = {};

function PlasmicContactUs__RenderFunc(props: {
  variants: PlasmicContactUs__VariantsArgs;
  args: PlasmicContactUs__ArgsType;
  overrides: PlasmicContactUs__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultContactUs__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsx3WpyNuTSdyZz6()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"pageBanerSection"}
            data-plasmic-override={overrides.pageBanerSection}
            className={classNames(projectcss.all, sty.pageBanerSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cAgNu)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__jddaR
                )}
              >
                {"Contact Us"}
              </h1>
            </div>
          </div>

          <section className={classNames(projectcss.all, sty.section__hp3Vn)}>
            <div className={classNames(projectcss.all, sty.freeBox__kdyuw)}>
              <div className={classNames(projectcss.all, sty.freeBox__eLdm1)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___23Yyo)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__ts2H2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__yXs1E
                        )}
                      >
                        <p.PlasmicImg
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/professional_services/images/globeTrotter18280791920Jpg.jpeg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__wNdJ2
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9Keoo
                          )}
                        >
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1__yiXu7
                            )}
                          >
                            {"Get In touch"}
                          </h1>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iBsF6
                            )}
                          >
                            {
                              "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam"
                            }
                          </div>

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"formContainer2"}
                            data-plasmic-override={overrides.formContainer2}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.formContainer2
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.columns___9LNz
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__nDk6G
                                )}
                              >
                                <input
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textInput__d7QJj
                                  )}
                                  placeholder={"First name" as const}
                                  size={1 as const}
                                  type={"text" as const}
                                  value={"" as const}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column___1Qs0H
                                )}
                              >
                                <input
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textInput__mrPjI
                                  )}
                                  placeholder={"Last name" as const}
                                  size={1 as const}
                                  type={"text" as const}
                                  value={"" as const}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__dw9Sa
                                )}
                              >
                                <input
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textInput___2Jcev
                                  )}
                                  placeholder={"Email address" as const}
                                  size={1 as const}
                                  type={"text" as const}
                                  value={"" as const}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column___0Yi8Q
                                )}
                              >
                                <input
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textInput__jsEju
                                  )}
                                  placeholder={"Phone number" as const}
                                  size={1 as const}
                                  type={"text" as const}
                                  value={"" as const}
                                />
                              </div>
                            </p.Stack>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.columns__hb7Q
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column___9B56S
                                )}
                              >
                                <input
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textInput__iJbeA
                                  )}
                                  placeholder={"Company" as const}
                                  size={1 as const}
                                  type={"text" as const}
                                  value={"" as const}
                                />
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__kOnFh
                                )}
                              >
                                <textarea
                                  data-plasmic-name={"textarea"}
                                  data-plasmic-override={overrides.textarea}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.textarea,
                                    sty.textarea
                                  )}
                                  placeholder={"Message" as const}
                                  value={"" as const}
                                />

                                <Button
                                  data-plasmic-name={"button"}
                                  data-plasmic-override={overrides.button}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button
                                  )}
                                  color={"blackCoffee" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qf8Vy
                                    )}
                                  >
                                    {"Send Message"}
                                  </div>
                                </Button>
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            </div>
          </section>

          <section className={classNames(projectcss.all, sty.section__hOn30)}>
            <div className={classNames(projectcss.all, sty.freeBox__ixTLm)}>
              <div className={classNames(projectcss.all, sty.freeBox__jDllj)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__b8HNx)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__svaBe)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__w3Mqd
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pBcze
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eoHhi
                            )}
                          >
                            <LoactionVectorsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__sVZfa
                              )}
                              role={"img"}
                            />
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__js170
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__rXiA4
                              )}
                            >
                              {"Address"}
                            </h3>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tesfm
                              )}
                            >
                              {"121 state lorem state"}
                            </div>
                          </p.Stack>
                        </p.Stack>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__l0Kz2
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jvrcO
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lIgDz
                            )}
                          >
                            <PhoneVectorsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xArxv
                              )}
                              role={"img"}
                            />
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6UkX
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__uoinI
                              )}
                            >
                              {"Phone"}
                            </h3>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tz7J1
                              )}
                            >
                              {"888888885588"}
                            </div>
                          </p.Stack>
                        </p.Stack>
                      </div>

                      <div
                        className={classNames(projectcss.all, sty.column__jvRn)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ypiz0
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wL8I1
                            )}
                          >
                            <EmailVectorsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ksvgs
                              )}
                              role={"img"}
                            />
                          </div>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ake49
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__xDxcu
                              )}
                            >
                              {"Email"}
                            </h3>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cVP
                              )}
                            >
                              {"Info@gmail.com"}
                            </div>
                          </p.Stack>
                        </p.Stack>
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            </div>
          </section>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "pageBanerSection",
    "img",
    "formContainer2",
    "textarea",
    "button",
    "footer"
  ],
  header: ["header"],
  pageBanerSection: ["pageBanerSection"],
  img: ["img"],
  formContainer2: ["formContainer2", "textarea", "button"],
  textarea: ["textarea"],
  button: ["button"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  pageBanerSection: "div";
  img: typeof p.PlasmicImg;
  formContainer2: "div";
  textarea: "textarea";
  button: typeof Button;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContactUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContactUs__VariantsArgs;
    args?: PlasmicContactUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContactUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContactUs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContactUs__ArgProps,
      internalVariantPropNames: PlasmicContactUs__VariantProps
    });

    return PlasmicContactUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContactUs";
  } else {
    func.displayName = `PlasmicContactUs.${nodeName}`;
  }
  return func;
}

export const PlasmicContactUs = Object.assign(
  // Top-level PlasmicContactUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    pageBanerSection: makeNodeComponent("pageBanerSection"),
    img: makeNodeComponent("img"),
    formContainer2: makeNodeComponent("formContainer2"),
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicContactUs
    internalVariantProps: PlasmicContactUs__VariantProps,
    internalArgProps: PlasmicContactUs__ArgProps
  }
);

export default PlasmicContactUs;
/* prettier-ignore-end */
